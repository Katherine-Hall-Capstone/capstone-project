// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int             @id @default(autoincrement())
  name                  String
  username              String          @unique
  email                 String          @unique 
  password              String
  role                  Role
  servicesOffered       Service[]
  clientAppointments    Appointment[]   @relation("ClientAppointments")
  providerAppointments  Appointment[]   @relation("ProviderAppointments")
  reviewsWritten        Review[]        @relation("ClientReviews")
  reviewsRecieved       Review[]        @relation("ProviderReviews")
  googleRefreshToken    String?
  googleRefreshIV       String?
  googleConnected       Boolean         @default(false)
  clientPreferences     ClientPreferences[]
  providerPreferences   ProviderPreferences?
}

model Service {
  id                    Int             @id @default(autoincrement())
  name                  String          
  duration              Int 
  provider              User            @relation(fields: [providerId], references: [id])
  providerId            Int
  appointments          Appointment[]
}

model Appointment {
  id                    Int             @id @default(autoincrement())
  clientId              Int?  
  client                User?           @relation("ClientAppointments", fields: [clientId], references: [id]) 
  providerId            Int 
  provider              User            @relation("ProviderAppointments", fields: [providerId], references: [id])
  googleEventId         String?
  dateTime              DateTime
  endDateTime           DateTime?
  status                AppointmentStatus
  service               Service?        @relation(fields: [serviceId], references: [id])
  serviceId             Int?
  notes                 String?
  isUnread              Boolean         @default(true)
}

model Review {
  id                    Int             @id @default(autoincrement())
  clientId              Int
  client                User            @relation("ClientReviews", fields: [clientId], references: [id])
  providerId            Int
  provider              User            @relation("ProviderReviews", fields: [providerId], references: [id])
  rating                Int
  comment               String?         
}

model ClientPreferences {
  id                    Int             @id @default(autoincrement())
  clientId              Int
  client                User            @relation(fields: [clientId], references: [id])
  dayOfWeek             String
  startTime             String
  endTime               String
}

model ProviderPreferences {
  id                    Int             @id @default(autoincrement())
  providerId            Int             @unique
  provider              User            @relation(fields: [providerId], references: [id])
  maxConsecutiveHours   Int
  prefersEarly          Boolean
}

enum Role {
  CLIENT
  PROVIDER
}

enum AppointmentStatus {
  AVAILABLE
  BOOKED
}